#+TITLE: Solaris Internals
#+DESCRIPTION: <<Solaris Internals Ver 2>>
#+AUTHOR: Leo Fu

* Part 0 - Solaris and OpenSolaris
Ref: [https://en.wikipedia.org/wiki/Solaris_(operating_system)] \\
- Soaris is still alive, named now Oracle Solaris.
[[./images/Solaris-Version-History.png]]
- OpenSolaris is borned in June of 2005 by Sun Microsystems. OpenSolaris is dead in 2010 after the acquisition of Sun Microsystems by Oracle. OpenSolaris short life cycle is as below:
[[./images/OpenSolaris-Version-History.png]]
* Authors
- Richard McDougall
- Jim Mauro
* Acknowledgements
- The Solaris Internals Community Authors
- The Reviewers
* Part One: Introduction to Solaris Internals
** Chapter 1 - Introduction
This chapter summarize key features of Solaris and take a overview of the major subsystems as a warm-up to the detailed dicussions that follow in the rest of the book.
*** Solaris key areas of innovation and development
- Reliability
- Performance and scalability
- Manageability
- Observability
- Resource management
*** Key features of Solaris
- UFS (Solaris/UNIX File System)
- DISM (Dynamic Intimate Shared Memory)
- SMF (Service Management Framework)
- Zones (Solaris Containers)
  - Software partitioning technology
  - Each zone is isolated from other zones
- DTrace (Dynamic tracing facility)
  - Software sensor
  - Induce performance regression
- X64 arch support
- IPv6 since Solaris 8, Feb 2000
- RBAC (Role Based Access Control)
- ...
*** Kernel overview
- Managing the hardware
- Supplying a set of system services
- Process & Thread
- System calls
- Key components
  - System call interface (API)
  - Process execution & scheduling
  - Memory management
  - Resource management
  - File system
  - I/O bus and device management
  - Kernel facilities
  - Networking
- Core Kernel + Loadable Modules (7 module types)
*** Major subsystem overview
**** Processes, Threads, and Scheduling
- Kernel (thread) & User process (thread)\\
  Switching execution between threads within the same process is inexpensive, since a virtual memory context switching is not required.
- Nucleus of the Solaris kernel thread model
  - Kernel threads
  - User threads
  - Process
  - LWP (Lightweight process)
    The kernel-visible execution context for a user thread.
- Thread Model
  user thread ↝ LWP ↝ kernel thread
**** Interprocess Communication
**** Signals
**** Memory Management
**** Files and File Systems
* Part Two: The Process Model
** Chapter 2 - The Solaris Process Model
** Chapter 3 - Scheduling Classes and the Dispatcher
** Chapter 4 - Interprocess Communication
** Chapter 5 - Process Rights Management
